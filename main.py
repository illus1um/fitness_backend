import random
import logging
from fastapi import FastAPI, HTTPException, status, Depends, Form
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from sqlalchemy.orm import Session
from fastapi.middleware.cors import CORSMiddleware

# üîπ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–æ–¥—É–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞
from auth.jwt import create_access_token, create_refresh_token
from auth.dependencies import get_current_user
from database.session import get_db, Base, engine
from schemas.user import UserCreate, UserOut, Token, RefreshTokenRequest
from crud.user import (
    create_user, get_user, get_user_by_email, update_user_password, authenticate_user,
    blacklist_token, save_reset_code, verify_reset_code
)
from models.user import User
from utils.email import send_email

# üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI()

# üîπ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# üîπ CORS (—Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞)
origins = ["http://localhost", "http://10.0.2.2:8000"]
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# üîπ OAuth2 —Å—Ö–µ–º–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

# üîπ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω–∞)
Base.metadata.create_all(bind=engine)


# ============================================================
# üîπ 1Ô∏è‚É£ –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø –ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø
# ============================================================

@app.post("/register", response_model=UserOut)
def register(user: UserCreate, db: Session = Depends(get_db)):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if get_user(db, user.username):
        raise HTTPException(status_code=400, detail="Username already registered")

    new_user = create_user(
        db,
        user.username,
        user.email,
        user.password,
        user.first_name,
        user.last_name,
        user.gender
    )
    return new_user


@app.post("/token", response_model=Token)
def login_for_access_token(
    form_data: OAuth2PasswordRequestForm = Depends(),
    db: Session = Depends(get_db)
):
    """–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É –∏ –≤—ã–¥–∞—á–∞ —Ç–æ–∫–µ–Ω–∞"""
    user = authenticate_user(db, form_data.username, form_data.password)
    if not user:
        logger.warning(f"–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: {form_data.username}")
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É")
    return {
        "access_token": create_access_token({"sub": user.username}),
        "refresh_token": create_refresh_token({"sub": user.username}),
        "token_type": "bearer"
    }


@app.post("/refresh", response_model=Token)
def refresh_token(refresh_request: RefreshTokenRequest):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞"""
    return {
        "access_token": create_access_token({"sub": "username"}),
        "refresh_token": create_refresh_token({"sub": "username"}),
        "token_type": "bearer"
    }


@app.get("/users/me", response_model=UserOut)
def read_users_me(current_user: User = Depends(get_current_user)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    return current_user


@app.post("/logout")
def logout(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞)"""
    blacklist_token(db, token)
    logger.info(f"–¢–æ–∫–µ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {token[:10]}...")
    return {"message": "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"}


# ============================================================
# üîπ 2Ô∏è‚É£ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ü–ê–†–û–õ–Ø
# ============================================================

@app.post("/forgot-password")
async def forgot_password(email: str = Form(...), db: Session = Depends(get_db)):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è (–æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –Ω–∞ email)"""
    user = get_user_by_email(db, email)
    if not user:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    reset_code = generate_reset_code()
    save_reset_code(db, email, reset_code)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ –±–∞–∑–µ

    email_body = f"""
    <h3>–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è</h3>
    <p>–í–∞—à –∫–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è: <b>{reset_code}</b></p>
    <p>–í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å.</p>
    """

    await send_email(email, "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è", email_body)

    return {"message": "–ö–æ–¥ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à email"}


@app.post("/verify-reset-code")
def verify_reset(email: str = Form(...), code: str = Form(...), db: Session = Depends(get_db)):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è"""
    if verify_reset_code(db, email, code):
        return {"message": "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"}
    else:
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –∫–æ–¥")


@app.post("/reset-password")
def reset_password(email: str = Form(...), code: str = Form(...), new_password: str = Form(...), db: Session = Depends(get_db)):
    """–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞"""
    if not verify_reset_code(db, email, code):
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –∫–æ–¥")

    user = get_user_by_email(db, email)
    if not user:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    update_user_password(db, user, new_password)

    return {"message": "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω"}


# ============================================================
# üîπ 3Ô∏è‚É£ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ============================================================

def generate_reset_code():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ 6-–∑–Ω–∞—á–Ω–æ–≥–æ –∫–æ–¥–∞"""
    return str(random.randint(100000, 999999))
